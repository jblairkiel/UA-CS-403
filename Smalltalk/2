"GNU Small Talk Exam 4"


"Standard Node for Data Structures"
Object subclass: #MyNode.
MyNode instanceVariableNames: 'data next prev'.
MyNode extend [
	data [^data]
	next [^next]
	prev [^prev]
	data: d [data:= d]
	next: n [next:= n]
	prev: p [prev:= p]
	display [Transcript display: data; cr.]
]

"Standard Queue: FIFO enqueue to back, dequeue front"
Object subclass: #MyQueue.
MyQueue instanceVariableNames: 'front back'.
MyQueue extend [ 
	front [^front]
	back [^back]
	front: f [front:= f]
	back: b [back:= b]

	insert: Key [
		|p|
		p:= MyNode new data: Key.
		front isNil
			ifTrue: [front:= p. back:= p]
			ifFalse: [back next: p. back:= p]
	]
	remove [
		|Key|
		front isNil ifTrue: [^nil].
		Key:= front data.
		front:= front next.
		^Key
	]
	
	display [
		|p|
		p:= front.
		[p notNil] whileTrue: [Transcript display: p data. Transcript show: '=>'. p:= p next].
		Transcript cr.
	]
]


"Standard Stack: FILO push to top, pop from top"
Object subclass: #MyStack.
MyStack instanceVariableNames: 'front back'.
MyStack extend [
	front [^front]
	back [^back]
	front: f [front:= f]
	back: b [back:= b]

	insert: Key [
		|p|
		p:= MyNode new data: Key.
		front isNil
			ifTrue: [front:= p. p prev: p. back:= p]
			ifFalse: [p prev: back. back next: p. back:= p]
	]
	
	remove [
		|Key|
		back isNil ifTrue: [^nil].
		Key:= back data.
		back:= back prev.
		back next: nil.
		^Key
	]

	display [
		|p|
		p:= front.
		[p notNil] whileTrue: [Transcript display: p data. Transcript show: '=>'. p:= p next].
		Transcript cr.
	]

]

"Deck Stack: push to top, popTop from top, popBottom from bottom"
Object subclass: #MyDeck.
MyDeck instanceVariableNames: 'top bottom count'.
MyDeck extend [
	top [^top]
	bottom [^bottom]
	count [Transcript show: 'Deck count is: '. Transcript display: count. Transcript cr]
	top: t [top:= t]
	bottom: b [bottom:= b]
	count: c [count:= c]

	push: Key [
		|p|
		p:= MyNode new data: Key.
		top isNil
			ifTrue: [bottom:= p. top:= p. count:= 1]
			ifFalse: [p prev: top. top next: p. top:= p. count:= count + 1].
	]
	
	popTop [
		|Key|
		top isNil ifTrue: [^nil].
		Key:= top data.
		top:= top prev.
		top next: nil.
		count:= count - 1.
		Transcript show: 'Popping Top: '. 
		Transcript display: Key.
		Transcript cr.
		^Key.
	]

	popBottom [ 
		|Key|
		bottom isNil ifTrue: [^nil].
		Key:= bottom data.
		bottom:= bottom next.
		bottom prev: nil.
		count:= count - 1.
		Transcript show: 'Popping Bottom: '. 
		Transcript display: Key.
		Transcript cr.
		^Key.
	]	

	display [
		|p|
		p:= bottom.
		[p notNil] whileTrue: [Transcript display: p data. Transcript show: '=>'. p:= p next].
		Transcript cr.
	]
	
]

"BST: Contains BSTNode with Data,Left,Right"
Object subclass: #BSTNode.
BSTNode instanceVariableNames: 'data left right level'.
BSTNode extend [

	data [^data]
	left [^left]
	right [^right]
	level [^level]
	data: d [data:= d]
	left: l [left:= l]
	right: r [right:= r]
	level: l [level:= l]

	preorder [
		Transcript show: ' '. Transcript display: data.
		left notNil ifTrue: [ left preorder].
		right notNil ifTrue: [ right preorder].
	]

	inorder [
		left notNil ifTrue: [ left inorder].
		Transcript show: ' '. Transcript display: data.
		right notNil ifTrue: [ right inorder].
	]

	postorder [
		left notNil ifTrue: [ left postorder].
		right notNil ifTrue: [ right postorder].
		Transcript show: ' '. Transcript display: data.
	]

	levelorder: l [
		(level == l) ifTrue: [Transcript show: ' '. Transcript display: data].
		left notNil ifTrue: [ left levelorder: l].
		right notNil ifTrue: [ right levelorder: l].
	]
]

Object subclass: #BST.
BST instanceVariableNames: 'root height'.
BST extend [
	root [^root]
	root: r [root:= r]
	height [^height]
	height: h [height:= h]

	insert: Key [
		|n p l|
		l:= 1.
		n:= BSTNode new data: Key.
		p:= root.
		root isNil
			ifTrue: [n level: 1. root:= n. height:= l.]
			ifFalse: [ [n notNil] whileTrue:
						[(p data > Key)
						ifTrue: [(p left isNil)
								ifTrue: [l:= l + 1. n level: l. p left: n. n:= nil. (l > height) ifTrue: [ height:= l]. ]
								ifFalse: [l:= l + 1. p:= p left.]
							]
						ifFalse: [(p right isNil)
								ifTrue: [l:= l + 1. n level: l. p right: n. n:= nil. (l > height) ifTrue: [ height:= l]. ]
								ifFalse: [l:= l + 1. p:= p right.]
							].
						]
				]
	]

	remove: Key [
		|n p|
		n:= BSTNode new data: Key.
		p:= root.
		root isNil
			ifTrue: [root:= n.]
			ifFalse: [ [n notNil] whileTrue:
						[(p data > Key)
						ifTrue: [(p left isNil)
								ifTrue: [p left: n. n:= nil]
								ifFalse: [p:= p left].
							]
						ifFalse: [(p right isNil)
								ifTrue: [p right: n. n:= nil]
								ifFalse: [p:= p right].
							].
						]
				]
	]

	inorder[
		Transcript show: 'Inorder of Tree: '.
		root inorder.
		Transcript cr.
	]

	preorder [
		Transcript show: 'Preorder of Tree: '.
		root preorder.
		Transcript cr.
	]

	postorder [
		Transcript show: 'Postorder of Tree: '.
		root postorder.
		Transcript cr.
	]

	levelorder [ 
		|h|
		h:= height.
		Transcript show: 'Levelorder of Tree: '.
		Transcript cr.
		1 to: h do: [:x | Transcript show: 'Level '. Transcript display: x. Transcript show: ':'. root levelorder: x . Transcript cr.].
		Transcript cr.
	]

	
]

Object subclass: #MyMath.
MyMath instanceVariableNames: 'int1 int2'.
MyMath extend [

	int1 [^int1]
	int2 [^int2]
	int1: x [int1:= x]
	int2: x [int2:= x]
	
	sum [
		|x|
		x:= int1 + int2.
		[^x].
	]

]

"'Main' Calls"
Transcript show: 'BST:'.
Transcript cr.
t:= BST new.
t insert: 5; insert: 10; insert: 18; insert: 7; insert: 20; insert: 15.
t preorder.
t inorder.
t postorder.
"t root levelorder: 3."
t levelorder.

Transcript show: 'MyMath:'.
Transcript cr.
m:= Math new int1: 5; int2: 6.
Transcript show: '5 + 6 ='.
Transcript cr.
Transcript display: m sum.


col:= ((1 to: 25) select: [:x| (x*x) > 3]) collect: [:x | (x*2)].

Transcript display: col.

"
Transcript show: 'Queue:'.
Transcript cr.
q:= MyQueue new.
q insert: 20; insert: 40; insert: 60; insert: 80.
q display.
q remove.
q display.
Transcript cr.

Transcript show: 'Stack:'.
Transcript cr.
s:= MyStack new.
s insert: 10; insert: 30; insert: 50; insert: 70.
s display.
s remove.
s display.
Transcript cr.

Transcript show: 'Deck:'.
Transcript cr.
d:= MyDeck new.
d count.
d push: 5; push: 10; push: 15; push: 20.
d count.
d display.
d popTop.
d display.
d popBottom.
d display.
Transcript cr.
"
